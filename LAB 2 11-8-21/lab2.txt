#include<omp.h>
int main()
{
int a[10],b[10],i,sum[10];
/*scan values of a and b*/
#pragma omp parallel for private(sum) reduction(+:sum)
for(i=0;i<10;i++)
{
sum[i]=a[i]+b[i];
printf("CPU:%D\t Thread:%d\tThread:%d\tValue:%d\n",sched_getcpu(),com_get_thread_num(),sum[i]);
}
}
//Sum(thread 0) sum (thread 1)....
Sum=sum
/*end of parallel ~section*/}pf(sum);
}


[11:16 AM] Harini  S
    #include <stdio.h>
#include <omp.h>
int main (void)
{​​​
    int i = 10;
    #pragma omp parallel private(i)
    {​​​
        printf("thread %d: i = %d\n", omp_get_thread_num(), i);
        i = 1000 + omp_get_thread_num();
    }​​​
    printf("i = %d\n", i);
    return 0;
}​​​


    
#include <omp.h> 
#include <stdio.h>
int main() 
{​​​​​​​
int a[5],b[5],i,sum[5];
    /* Scan values for a & b */
    //printf("Im print"); 
    for (i=0; i<5; i++) 
    {​​​​​​​
    printf("a%d: ",i);
    scanf("%d",&a[i]);
}​​​​​​​
for (i=0; i<5; i++) 
    {​​​​​​​
    printf("b%d: ",i);
    scanf("%d",&b[i]);
}​​​​​​​
           #pragma omp parallel
        for (i=0; i < 5; i++) 
        {​​​​​​​


sum[i] = a[i] + b[i]; 
printf("CPU%d\tThread%d\tValue%d\n",sched_getcpu(),omp_get_thread_num(),sum[i]);
        }​​​​​​​
         
    }​​​​​​​
 

#include<stdio.h>
#include<omp.h>
int main()
{
    int a[10],b[10],c[10],i;
    for(i=0;i<10;i++)
    {
        a[i]=i;
        b[i]=i+1;
    }
    #pragma omp parallel for
    for(i=0;i<10;i++)
    {
        c[i]=a[i]+b[i];
        printf("core: %d\t thread: %d\t value: %d\n",sched_getcpu(),omp_get_thread_num(),c[i]);
    }
}

